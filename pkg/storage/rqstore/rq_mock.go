// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -destination=rq_mock.go -package=rqstore -source=store.go
//

// Package rqstore is a generated GoMock package.
package rqstore

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// DeleteSymbolsByTxID mocks base method.
func (m *MockStore) DeleteSymbolsByTxID(txid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSymbolsByTxID", txid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSymbolsByTxID indicates an expected call of DeleteSymbolsByTxID.
func (mr *MockStoreMockRecorder) DeleteSymbolsByTxID(txid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSymbolsByTxID", reflect.TypeOf((*MockStore)(nil).DeleteSymbolsByTxID), txid)
}

// GetDirectoryByTxID mocks base method.
func (m *MockStore) GetDirectoryByTxID(txid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectoryByTxID", txid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectoryByTxID indicates an expected call of GetDirectoryByTxID.
func (mr *MockStoreMockRecorder) GetDirectoryByTxID(txid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectoryByTxID", reflect.TypeOf((*MockStore)(nil).GetDirectoryByTxID), txid)
}

// GetToDoStoreSymbolDirs mocks base method.
func (m *MockStore) GetToDoStoreSymbolDirs() ([]SymbolDir, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToDoStoreSymbolDirs")
	ret0, _ := ret[0].([]SymbolDir)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToDoStoreSymbolDirs indicates an expected call of GetToDoStoreSymbolDirs.
func (mr *MockStoreMockRecorder) GetToDoStoreSymbolDirs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToDoStoreSymbolDirs", reflect.TypeOf((*MockStore)(nil).GetToDoStoreSymbolDirs))
}

// SetIsCompleted mocks base method.
func (m *MockStore) SetIsCompleted(txid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetIsCompleted", txid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIsCompleted indicates an expected call of SetIsCompleted.
func (mr *MockStoreMockRecorder) SetIsCompleted(txid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIsCompleted", reflect.TypeOf((*MockStore)(nil).SetIsCompleted), txid)
}

// StoreSymbolDirectory mocks base method.
func (m *MockStore) StoreSymbolDirectory(txid, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreSymbolDirectory", txid, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreSymbolDirectory indicates an expected call of StoreSymbolDirectory.
func (mr *MockStoreMockRecorder) StoreSymbolDirectory(txid, dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreSymbolDirectory", reflect.TypeOf((*MockStore)(nil).StoreSymbolDirectory), txid, dir)
}

// UpdateIsFirstBatchStored mocks base method.
func (m *MockStore) UpdateIsFirstBatchStored(txid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIsFirstBatchStored", txid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIsFirstBatchStored indicates an expected call of UpdateIsFirstBatchStored.
func (mr *MockStoreMockRecorder) UpdateIsFirstBatchStored(txid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIsFirstBatchStored", reflect.TypeOf((*MockStore)(nil).UpdateIsFirstBatchStored), txid)
}
