// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -destination=dd_mock.go -package=dd -source=interfaces.go
//

// Package dd is a generated GoMock package.
package dd

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockClientInterface) Connect(ctx context.Context, address string) (Connection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, address)
	ret0, _ := ret[0].(Connection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockClientInterfaceMockRecorder) Connect(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockClientInterface)(nil).Connect), ctx, address)
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
	isgomock struct{}
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// DDService mocks base method.
func (m *MockConnection) DDService(config *Config) DDService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DDService", config)
	ret0, _ := ret[0].(DDService)
	return ret0
}

// DDService indicates an expected call of DDService.
func (mr *MockConnectionMockRecorder) DDService(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DDService", reflect.TypeOf((*MockConnection)(nil).DDService), config)
}

// MockDDService is a mock of DDService interface.
type MockDDService struct {
	ctrl     *gomock.Controller
	recorder *MockDDServiceMockRecorder
	isgomock struct{}
}

// MockDDServiceMockRecorder is the mock recorder for MockDDService.
type MockDDServiceMockRecorder struct {
	mock *MockDDService
}

// NewMockDDService creates a new mock instance.
func NewMockDDService(ctrl *gomock.Controller) *MockDDService {
	mock := &MockDDService{ctrl: ctrl}
	mock.recorder = &MockDDServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDDService) EXPECT() *MockDDServiceMockRecorder {
	return m.recorder
}

// GetStatus mocks base method.
func (m *MockDDService) GetStatus(ctx context.Context, req GetStatusRequest) (GetStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", ctx, req)
	ret0, _ := ret[0].(GetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockDDServiceMockRecorder) GetStatus(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockDDService)(nil).GetStatus), ctx, req)
}

// ImageRarenessScore mocks base method.
func (m *MockDDService) ImageRarenessScore(ctx context.Context, req RarenessScoreRequest) (ImageRarenessScoreResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageRarenessScore", ctx, req)
	ret0, _ := ret[0].(ImageRarenessScoreResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImageRarenessScore indicates an expected call of ImageRarenessScore.
func (mr *MockDDServiceMockRecorder) ImageRarenessScore(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageRarenessScore", reflect.TypeOf((*MockDDService)(nil).ImageRarenessScore), ctx, req)
}
