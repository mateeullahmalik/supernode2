// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=action_msg_mock.go -package=action_msg -source=interface.go
//

// Package action_msg is a generated GoMock package.
package action_msg

import (
	context "context"
	reflect "reflect"

	tx "github.com/cosmos/cosmos-sdk/types/tx"
	gomock "go.uber.org/mock/gomock"
)

// MockModule is a mock of Module interface.
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
	isgomock struct{}
}

// MockModuleMockRecorder is the mock recorder for MockModule.
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance.
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// FinalizeCascadeAction mocks base method.
func (m *MockModule) FinalizeCascadeAction(ctx context.Context, actionId string, rqIdsIds []string) (*tx.BroadcastTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinalizeCascadeAction", ctx, actionId, rqIdsIds)
	ret0, _ := ret[0].(*tx.BroadcastTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinalizeCascadeAction indicates an expected call of FinalizeCascadeAction.
func (mr *MockModuleMockRecorder) FinalizeCascadeAction(ctx, actionId, rqIdsIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeCascadeAction", reflect.TypeOf((*MockModule)(nil).FinalizeCascadeAction), ctx, actionId, rqIdsIds)
}

// RequesAction mocks base method.
func (m *MockModule) RequesAction(ctx context.Context, actionType, metadata, price, expirationTime string) (*tx.BroadcastTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequesAction", ctx, actionType, metadata, price, expirationTime)
	ret0, _ := ret[0].(*tx.BroadcastTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RequesAction indicates an expected call of RequesAction.
func (mr *MockModuleMockRecorder) RequesAction(ctx, actionType, metadata, price, expirationTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequesAction", reflect.TypeOf((*MockModule)(nil).RequesAction), ctx, actionType, metadata, price, expirationTime)
}
