// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=auth_mock.go -package=auth -source=interface.go
//

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/x/auth/types"
	gomock "go.uber.org/mock/gomock"
)

// MockModule is a mock of Module interface.
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
	isgomock struct{}
}

// MockModuleMockRecorder is the mock recorder for MockModule.
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance.
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// AccountInfoByAddress mocks base method.
func (m *MockModule) AccountInfoByAddress(ctx context.Context, addr string) (*types.QueryAccountInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountInfoByAddress", ctx, addr)
	ret0, _ := ret[0].(*types.QueryAccountInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountInfoByAddress indicates an expected call of AccountInfoByAddress.
func (mr *MockModuleMockRecorder) AccountInfoByAddress(ctx, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountInfoByAddress", reflect.TypeOf((*MockModule)(nil).AccountInfoByAddress), ctx, addr)
}

// Verify mocks base method.
func (m *MockModule) Verify(ctx context.Context, accAddress string, data, signature []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ctx, accAddress, data, signature)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockModuleMockRecorder) Verify(ctx, accAddress, data, signature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockModule)(nil).Verify), ctx, accAddress, data, signature)
}
