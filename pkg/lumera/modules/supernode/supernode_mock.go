// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=supernode_mock.go -package=supernode -source=interface.go
//

// Package supernode is a generated GoMock package.
package supernode

import (
	context "context"
	reflect "reflect"

	types "github.com/LumeraProtocol/lumera/x/supernode/v1/types"
	gomock "go.uber.org/mock/gomock"
)

// MockModule is a mock of Module interface.
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
	isgomock struct{}
}

// MockModuleMockRecorder is the mock recorder for MockModule.
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance.
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// GetParams mocks base method.
func (m *MockModule) GetParams(ctx context.Context) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParams", ctx)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParams indicates an expected call of GetParams.
func (mr *MockModuleMockRecorder) GetParams(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParams", reflect.TypeOf((*MockModule)(nil).GetParams), ctx)
}

// GetSuperNode mocks base method.
func (m *MockModule) GetSuperNode(ctx context.Context, address string) (*types.QueryGetSuperNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuperNode", ctx, address)
	ret0, _ := ret[0].(*types.QueryGetSuperNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuperNode indicates an expected call of GetSuperNode.
func (mr *MockModuleMockRecorder) GetSuperNode(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuperNode", reflect.TypeOf((*MockModule)(nil).GetSuperNode), ctx, address)
}

// GetSupernodeBySupernodeAddress mocks base method.
func (m *MockModule) GetSupernodeBySupernodeAddress(ctx context.Context, address string) (*types.SuperNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupernodeBySupernodeAddress", ctx, address)
	ret0, _ := ret[0].(*types.SuperNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupernodeBySupernodeAddress indicates an expected call of GetSupernodeBySupernodeAddress.
func (mr *MockModuleMockRecorder) GetSupernodeBySupernodeAddress(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupernodeBySupernodeAddress", reflect.TypeOf((*MockModule)(nil).GetSupernodeBySupernodeAddress), ctx, address)
}

// GetSupernodeWithLatestAddress mocks base method.
func (m *MockModule) GetSupernodeWithLatestAddress(ctx context.Context, address string) (*SuperNodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupernodeWithLatestAddress", ctx, address)
	ret0, _ := ret[0].(*SuperNodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupernodeWithLatestAddress indicates an expected call of GetSupernodeWithLatestAddress.
func (mr *MockModuleMockRecorder) GetSupernodeWithLatestAddress(ctx, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupernodeWithLatestAddress", reflect.TypeOf((*MockModule)(nil).GetSupernodeWithLatestAddress), ctx, address)
}

// GetTopSuperNodesForBlock mocks base method.
func (m *MockModule) GetTopSuperNodesForBlock(ctx context.Context, blockHeight uint64) (*types.QueryGetTopSuperNodesForBlockResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopSuperNodesForBlock", ctx, blockHeight)
	ret0, _ := ret[0].(*types.QueryGetTopSuperNodesForBlockResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopSuperNodesForBlock indicates an expected call of GetTopSuperNodesForBlock.
func (mr *MockModuleMockRecorder) GetTopSuperNodesForBlock(ctx, blockHeight any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopSuperNodesForBlock", reflect.TypeOf((*MockModule)(nil).GetTopSuperNodesForBlock), ctx, blockHeight)
}
