// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=action_mock.go -package=action -source=interface.go
//

// Package action is a generated GoMock package.
package action

import (
	context "context"
	reflect "reflect"

	types "github.com/LumeraProtocol/lumera/x/action/v1/types"
	gomock "go.uber.org/mock/gomock"
)

// MockModule is a mock of Module interface.
type MockModule struct {
	ctrl     *gomock.Controller
	recorder *MockModuleMockRecorder
	isgomock struct{}
}

// MockModuleMockRecorder is the mock recorder for MockModule.
type MockModuleMockRecorder struct {
	mock *MockModule
}

// NewMockModule creates a new mock instance.
func NewMockModule(ctrl *gomock.Controller) *MockModule {
	mock := &MockModule{ctrl: ctrl}
	mock.recorder = &MockModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModule) EXPECT() *MockModuleMockRecorder {
	return m.recorder
}

// GetAction mocks base method.
func (m *MockModule) GetAction(ctx context.Context, actionID string) (*types.QueryGetActionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAction", ctx, actionID)
	ret0, _ := ret[0].(*types.QueryGetActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAction indicates an expected call of GetAction.
func (mr *MockModuleMockRecorder) GetAction(ctx, actionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAction", reflect.TypeOf((*MockModule)(nil).GetAction), ctx, actionID)
}

// GetActionFee mocks base method.
func (m *MockModule) GetActionFee(ctx context.Context, dataSize string) (*types.QueryGetActionFeeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActionFee", ctx, dataSize)
	ret0, _ := ret[0].(*types.QueryGetActionFeeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActionFee indicates an expected call of GetActionFee.
func (mr *MockModuleMockRecorder) GetActionFee(ctx, dataSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActionFee", reflect.TypeOf((*MockModule)(nil).GetActionFee), ctx, dataSize)
}

// GetParams mocks base method.
func (m *MockModule) GetParams(ctx context.Context) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParams", ctx)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParams indicates an expected call of GetParams.
func (mr *MockModuleMockRecorder) GetParams(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParams", reflect.TypeOf((*MockModule)(nil).GetParams), ctx)
}
