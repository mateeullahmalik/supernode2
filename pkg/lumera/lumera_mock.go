// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -destination=lumera_mock.go -package=lumera -source=interface.go
//

// Package lumera is a generated GoMock package.
package lumera

import (
	reflect "reflect"

	action "github.com/LumeraProtocol/supernode/v2/pkg/lumera/modules/action"
	action_msg "github.com/LumeraProtocol/supernode/v2/pkg/lumera/modules/action_msg"
	auth "github.com/LumeraProtocol/supernode/v2/pkg/lumera/modules/auth"
	node "github.com/LumeraProtocol/supernode/v2/pkg/lumera/modules/node"
	supernode "github.com/LumeraProtocol/supernode/v2/pkg/lumera/modules/supernode"
	tx "github.com/LumeraProtocol/supernode/v2/pkg/lumera/modules/tx"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Action mocks base method.
func (m *MockClient) Action() action.Module {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Action")
	ret0, _ := ret[0].(action.Module)
	return ret0
}

// Action indicates an expected call of Action.
func (mr *MockClientMockRecorder) Action() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Action", reflect.TypeOf((*MockClient)(nil).Action))
}

// ActionMsg mocks base method.
func (m *MockClient) ActionMsg() action_msg.Module {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActionMsg")
	ret0, _ := ret[0].(action_msg.Module)
	return ret0
}

// ActionMsg indicates an expected call of ActionMsg.
func (mr *MockClientMockRecorder) ActionMsg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActionMsg", reflect.TypeOf((*MockClient)(nil).ActionMsg))
}

// Auth mocks base method.
func (m *MockClient) Auth() auth.Module {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(auth.Module)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockClientMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockClient)(nil).Auth))
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// Node mocks base method.
func (m *MockClient) Node() node.Module {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Node")
	ret0, _ := ret[0].(node.Module)
	return ret0
}

// Node indicates an expected call of Node.
func (mr *MockClientMockRecorder) Node() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Node", reflect.TypeOf((*MockClient)(nil).Node))
}

// SuperNode mocks base method.
func (m *MockClient) SuperNode() supernode.Module {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuperNode")
	ret0, _ := ret[0].(supernode.Module)
	return ret0
}

// SuperNode indicates an expected call of SuperNode.
func (mr *MockClientMockRecorder) SuperNode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuperNode", reflect.TypeOf((*MockClient)(nil).SuperNode))
}

// Tx mocks base method.
func (m *MockClient) Tx() tx.Module {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tx")
	ret0, _ := ret[0].(tx.Module)
	return ret0
}

// Tx indicates an expected call of Tx.
func (mr *MockClientMockRecorder) Tx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tx", reflect.TypeOf((*MockClient)(nil).Tx))
}
