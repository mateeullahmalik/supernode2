// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -destination=client_mock.go -package=client -source=client.go
//

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	connectivity "google.golang.org/grpc/connectivity"
	keepalive "google.golang.org/grpc/keepalive"
)

// MockgrpcClient is a mock of grpcClient interface.
type MockgrpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockgrpcClientMockRecorder
	isgomock struct{}
}

// MockgrpcClientMockRecorder is the mock recorder for MockgrpcClient.
type MockgrpcClientMockRecorder struct {
	mock *MockgrpcClient
}

// NewMockgrpcClient creates a new mock instance.
func NewMockgrpcClient(ctrl *gomock.Controller) *MockgrpcClient {
	mock := &MockgrpcClient{ctrl: ctrl}
	mock.recorder = &MockgrpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgrpcClient) EXPECT() *MockgrpcClientMockRecorder {
	return m.recorder
}

// BuildDialOptions mocks base method.
func (m *MockgrpcClient) BuildDialOptions(opts *ClientOptions) []grpc.DialOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildDialOptions", opts)
	ret0, _ := ret[0].([]grpc.DialOption)
	return ret0
}

// BuildDialOptions indicates an expected call of BuildDialOptions.
func (mr *MockgrpcClientMockRecorder) BuildDialOptions(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildDialOptions", reflect.TypeOf((*MockgrpcClient)(nil).BuildDialOptions), opts)
}

// Connect mocks base method.
func (m *MockgrpcClient) Connect(ctx context.Context, address string, opts *ClientOptions) (*grpc.ClientConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, address, opts)
	ret0, _ := ret[0].(*grpc.ClientConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockgrpcClientMockRecorder) Connect(ctx, address, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockgrpcClient)(nil).Connect), ctx, address, opts)
}

// GetState mocks base method.
func (m *MockgrpcClient) GetState(conn *grpc.ClientConn) connectivity.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", conn)
	ret0, _ := ret[0].(connectivity.State)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockgrpcClientMockRecorder) GetState(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockgrpcClient)(nil).GetState), conn)
}

// MonitorConnectionState mocks base method.
func (m *MockgrpcClient) MonitorConnectionState(ctx context.Context, conn *grpc.ClientConn, callback func(connectivity.State)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MonitorConnectionState", ctx, conn, callback)
}

// MonitorConnectionState indicates an expected call of MonitorConnectionState.
func (mr *MockgrpcClientMockRecorder) MonitorConnectionState(ctx, conn, callback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MonitorConnectionState", reflect.TypeOf((*MockgrpcClient)(nil).MonitorConnectionState), ctx, conn, callback)
}

// ResetConnectBackoff mocks base method.
func (m *MockgrpcClient) ResetConnectBackoff(conn *grpc.ClientConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetConnectBackoff", conn)
}

// ResetConnectBackoff indicates an expected call of ResetConnectBackoff.
func (mr *MockgrpcClientMockRecorder) ResetConnectBackoff(conn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetConnectBackoff", reflect.TypeOf((*MockgrpcClient)(nil).ResetConnectBackoff), conn)
}

// WaitForStateChange mocks base method.
func (m *MockgrpcClient) WaitForStateChange(ctx context.Context, conn *grpc.ClientConn, sourceState connectivity.State) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForStateChange", ctx, conn, sourceState)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitForStateChange indicates an expected call of WaitForStateChange.
func (mr *MockgrpcClientMockRecorder) WaitForStateChange(ctx, conn, sourceState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForStateChange", reflect.TypeOf((*MockgrpcClient)(nil).WaitForStateChange), ctx, conn, sourceState)
}

// MockDialOptionBuilder is a mock of DialOptionBuilder interface.
type MockDialOptionBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockDialOptionBuilderMockRecorder
	isgomock struct{}
}

// MockDialOptionBuilderMockRecorder is the mock recorder for MockDialOptionBuilder.
type MockDialOptionBuilderMockRecorder struct {
	mock *MockDialOptionBuilder
}

// NewMockDialOptionBuilder creates a new mock instance.
func NewMockDialOptionBuilder(ctrl *gomock.Controller) *MockDialOptionBuilder {
	mock := &MockDialOptionBuilder{ctrl: ctrl}
	mock.recorder = &MockDialOptionBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDialOptionBuilder) EXPECT() *MockDialOptionBuilderMockRecorder {
	return m.recorder
}

// buildCallOptions mocks base method.
func (m *MockDialOptionBuilder) buildCallOptions(opts *ClientOptions) []grpc.CallOption {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "buildCallOptions", opts)
	ret0, _ := ret[0].([]grpc.CallOption)
	return ret0
}

// buildCallOptions indicates an expected call of buildCallOptions.
func (mr *MockDialOptionBuilderMockRecorder) buildCallOptions(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "buildCallOptions", reflect.TypeOf((*MockDialOptionBuilder)(nil).buildCallOptions), opts)
}

// buildConnectParams mocks base method.
func (m *MockDialOptionBuilder) buildConnectParams(opts *ClientOptions) grpc.ConnectParams {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "buildConnectParams", opts)
	ret0, _ := ret[0].(grpc.ConnectParams)
	return ret0
}

// buildConnectParams indicates an expected call of buildConnectParams.
func (mr *MockDialOptionBuilderMockRecorder) buildConnectParams(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "buildConnectParams", reflect.TypeOf((*MockDialOptionBuilder)(nil).buildConnectParams), opts)
}

// buildKeepAliveParams mocks base method.
func (m *MockDialOptionBuilder) buildKeepAliveParams(opts *ClientOptions) keepalive.ClientParameters {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "buildKeepAliveParams", opts)
	ret0, _ := ret[0].(keepalive.ClientParameters)
	return ret0
}

// buildKeepAliveParams indicates an expected call of buildKeepAliveParams.
func (mr *MockDialOptionBuilderMockRecorder) buildKeepAliveParams(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "buildKeepAliveParams", reflect.TypeOf((*MockDialOptionBuilder)(nil).buildKeepAliveParams), opts)
}

// MockConnectionHandler is a mock of ConnectionHandler interface.
type MockConnectionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionHandlerMockRecorder
	isgomock struct{}
}

// MockConnectionHandlerMockRecorder is the mock recorder for MockConnectionHandler.
type MockConnectionHandlerMockRecorder struct {
	mock *MockConnectionHandler
}

// NewMockConnectionHandler creates a new mock instance.
func NewMockConnectionHandler(ctrl *gomock.Controller) *MockConnectionHandler {
	mock := &MockConnectionHandler{ctrl: ctrl}
	mock.recorder = &MockConnectionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnectionHandler) EXPECT() *MockConnectionHandlerMockRecorder {
	return m.recorder
}

// attemptConnection mocks base method.
func (m *MockConnectionHandler) attemptConnection(ctx context.Context, target string, opts *ClientOptions) (*grpc.ClientConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "attemptConnection", ctx, target, opts)
	ret0, _ := ret[0].(*grpc.ClientConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// attemptConnection indicates an expected call of attemptConnection.
func (mr *MockConnectionHandlerMockRecorder) attemptConnection(ctx, target, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "attemptConnection", reflect.TypeOf((*MockConnectionHandler)(nil).attemptConnection), ctx, target, opts)
}

// configureContext mocks base method.
func (m *MockConnectionHandler) configureContext(ctx context.Context) (context.Context, context.CancelFunc) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "configureContext", ctx)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(context.CancelFunc)
	return ret0, ret1
}

// configureContext indicates an expected call of configureContext.
func (mr *MockConnectionHandlerMockRecorder) configureContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "configureContext", reflect.TypeOf((*MockConnectionHandler)(nil).configureContext), ctx)
}

// retryConnection mocks base method.
func (m *MockConnectionHandler) retryConnection(ctx context.Context, address string, opts *ClientOptions) (*grpc.ClientConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "retryConnection", ctx, address, opts)
	ret0, _ := ret[0].(*grpc.ClientConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// retryConnection indicates an expected call of retryConnection.
func (mr *MockConnectionHandlerMockRecorder) retryConnection(ctx, address, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "retryConnection", reflect.TypeOf((*MockConnectionHandler)(nil).retryConnection), ctx, address, opts)
}

// MockClientConn is a mock of ClientConn interface.
type MockClientConn struct {
	ctrl     *gomock.Controller
	recorder *MockClientConnMockRecorder
	isgomock struct{}
}

// MockClientConnMockRecorder is the mock recorder for MockClientConn.
type MockClientConnMockRecorder struct {
	mock *MockClientConn
}

// NewMockClientConn creates a new mock instance.
func NewMockClientConn(ctrl *gomock.Controller) *MockClientConn {
	mock := &MockClientConn{ctrl: ctrl}
	mock.recorder = &MockClientConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientConn) EXPECT() *MockClientConnMockRecorder {
	return m.recorder
}

// GetState mocks base method.
func (m *MockClientConn) GetState() connectivity.State {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState")
	ret0, _ := ret[0].(connectivity.State)
	return ret0
}

// GetState indicates an expected call of GetState.
func (mr *MockClientConnMockRecorder) GetState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockClientConn)(nil).GetState))
}

// ResetConnectBackoff mocks base method.
func (m *MockClientConn) ResetConnectBackoff() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetConnectBackoff")
}

// ResetConnectBackoff indicates an expected call of ResetConnectBackoff.
func (mr *MockClientConnMockRecorder) ResetConnectBackoff() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetConnectBackoff", reflect.TypeOf((*MockClientConn)(nil).ResetConnectBackoff))
}

// WaitForStateChange mocks base method.
func (m *MockClientConn) WaitForStateChange(ctx context.Context, sourceState connectivity.State) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForStateChange", ctx, sourceState)
	ret0, _ := ret[0].(bool)
	return ret0
}

// WaitForStateChange indicates an expected call of WaitForStateChange.
func (mr *MockClientConnMockRecorder) WaitForStateChange(ctx, sourceState any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForStateChange", reflect.TypeOf((*MockClientConn)(nil).WaitForStateChange), ctx, sourceState)
}
