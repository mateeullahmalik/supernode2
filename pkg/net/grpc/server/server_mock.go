// Code generated by MockGen. DO NOT EDIT.
// Source: server.go
//
// Generated by this command:
//
//	mockgen -destination=server_mock.go -package=server -source=server.go
//

// Package server is a generated GoMock package.
package server

import (
	net "net"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	keepalive "google.golang.org/grpc/keepalive"
)

// MockgrpcServer is a mock of grpcServer interface.
type MockgrpcServer struct {
	ctrl     *gomock.Controller
	recorder *MockgrpcServerMockRecorder
	isgomock struct{}
}

// MockgrpcServerMockRecorder is the mock recorder for MockgrpcServer.
type MockgrpcServerMockRecorder struct {
	mock *MockgrpcServer
}

// NewMockgrpcServer creates a new mock instance.
func NewMockgrpcServer(ctrl *gomock.Controller) *MockgrpcServer {
	mock := &MockgrpcServer{ctrl: ctrl}
	mock.recorder = &MockgrpcServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgrpcServer) EXPECT() *MockgrpcServerMockRecorder {
	return m.recorder
}

// GetServiceInfo mocks base method.
func (m *MockgrpcServer) GetServiceInfo() map[string]grpc.ServiceInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceInfo")
	ret0, _ := ret[0].(map[string]grpc.ServiceInfo)
	return ret0
}

// GetServiceInfo indicates an expected call of GetServiceInfo.
func (mr *MockgrpcServerMockRecorder) GetServiceInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInfo", reflect.TypeOf((*MockgrpcServer)(nil).GetServiceInfo))
}

// GracefulStop mocks base method.
func (m *MockgrpcServer) GracefulStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GracefulStop")
}

// GracefulStop indicates an expected call of GracefulStop.
func (mr *MockgrpcServerMockRecorder) GracefulStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GracefulStop", reflect.TypeOf((*MockgrpcServer)(nil).GracefulStop))
}

// RegisterService mocks base method.
func (m *MockgrpcServer) RegisterService(arg0 *grpc.ServiceDesc, arg1 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterService", arg0, arg1)
}

// RegisterService indicates an expected call of RegisterService.
func (mr *MockgrpcServerMockRecorder) RegisterService(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterService", reflect.TypeOf((*MockgrpcServer)(nil).RegisterService), arg0, arg1)
}

// Serve mocks base method.
func (m *MockgrpcServer) Serve(arg0 net.Listener) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serve", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Serve indicates an expected call of Serve.
func (mr *MockgrpcServerMockRecorder) Serve(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockgrpcServer)(nil).Serve), arg0)
}

// Stop mocks base method.
func (m *MockgrpcServer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockgrpcServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockgrpcServer)(nil).Stop))
}

// MockServerOptionBuilder is a mock of ServerOptionBuilder interface.
type MockServerOptionBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockServerOptionBuilderMockRecorder
	isgomock struct{}
}

// MockServerOptionBuilderMockRecorder is the mock recorder for MockServerOptionBuilder.
type MockServerOptionBuilderMockRecorder struct {
	mock *MockServerOptionBuilder
}

// NewMockServerOptionBuilder creates a new mock instance.
func NewMockServerOptionBuilder(ctrl *gomock.Controller) *MockServerOptionBuilder {
	mock := &MockServerOptionBuilder{ctrl: ctrl}
	mock.recorder = &MockServerOptionBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerOptionBuilder) EXPECT() *MockServerOptionBuilderMockRecorder {
	return m.recorder
}

// buildKeepAliveParams mocks base method.
func (m *MockServerOptionBuilder) buildKeepAliveParams(opts *ServerOptions) keepalive.ServerParameters {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "buildKeepAliveParams", opts)
	ret0, _ := ret[0].(keepalive.ServerParameters)
	return ret0
}

// buildKeepAliveParams indicates an expected call of buildKeepAliveParams.
func (mr *MockServerOptionBuilderMockRecorder) buildKeepAliveParams(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "buildKeepAliveParams", reflect.TypeOf((*MockServerOptionBuilder)(nil).buildKeepAliveParams), opts)
}

// buildKeepAlivePolicy mocks base method.
func (m *MockServerOptionBuilder) buildKeepAlivePolicy(opts *ServerOptions) keepalive.EnforcementPolicy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "buildKeepAlivePolicy", opts)
	ret0, _ := ret[0].(keepalive.EnforcementPolicy)
	return ret0
}

// buildKeepAlivePolicy indicates an expected call of buildKeepAlivePolicy.
func (mr *MockServerOptionBuilderMockRecorder) buildKeepAlivePolicy(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "buildKeepAlivePolicy", reflect.TypeOf((*MockServerOptionBuilder)(nil).buildKeepAlivePolicy), opts)
}
