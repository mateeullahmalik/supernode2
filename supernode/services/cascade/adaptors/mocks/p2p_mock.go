// Code generated by MockGen. DO NOT EDIT.
// Source: p2p.go
//
// Generated by this command:
//
//	mockgen -destination=mocks/p2p_mock.go -package=cascadeadaptormocks -source=p2p.go
//

// Package cascadeadaptormocks is a generated GoMock package.
package cascadeadaptormocks

import (
	context "context"
	reflect "reflect"

	logtrace "github.com/LumeraProtocol/supernode/v2/pkg/logtrace"
	adaptors "github.com/LumeraProtocol/supernode/v2/supernode/services/cascade/adaptors"
	gomock "go.uber.org/mock/gomock"
)

// MockP2PService is a mock of P2PService interface.
type MockP2PService struct {
	ctrl     *gomock.Controller
	recorder *MockP2PServiceMockRecorder
	isgomock struct{}
}

// MockP2PServiceMockRecorder is the mock recorder for MockP2PService.
type MockP2PServiceMockRecorder struct {
	mock *MockP2PService
}

// NewMockP2PService creates a new mock instance.
func NewMockP2PService(ctrl *gomock.Controller) *MockP2PService {
	mock := &MockP2PService{ctrl: ctrl}
	mock.recorder = &MockP2PServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockP2PService) EXPECT() *MockP2PServiceMockRecorder {
	return m.recorder
}

// StoreArtefacts mocks base method.
func (m *MockP2PService) StoreArtefacts(ctx context.Context, req adaptors.StoreArtefactsRequest, f logtrace.Fields) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreArtefacts", ctx, req, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreArtefacts indicates an expected call of StoreArtefacts.
func (mr *MockP2PServiceMockRecorder) StoreArtefacts(ctx, req, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreArtefacts", reflect.TypeOf((*MockP2PService)(nil).StoreArtefacts), ctx, req, f)
}
