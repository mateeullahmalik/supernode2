// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cosmos/cosmos-sdk/crypto/keyring (interfaces: Keyring)

// Package mock_keyring is a generated GoMock package.
package server

import (
	reflect "reflect"

	keyring "github.com/cosmos/cosmos-sdk/crypto/keyring"
	types "github.com/cosmos/cosmos-sdk/crypto/types"
	types0 "github.com/cosmos/cosmos-sdk/types"
	signing "github.com/cosmos/cosmos-sdk/types/tx/signing"
	gomock "go.uber.org/mock/gomock"
)

// MockKeyring is a mock of Keyring interface.
type MockKeyring struct {
	ctrl     *gomock.Controller
	recorder *MockKeyringMockRecorder
}

// MockKeyringMockRecorder is the mock recorder for MockKeyring.
type MockKeyringMockRecorder struct {
	mock *MockKeyring
}

// NewMockKeyring creates a new mock instance.
func NewMockKeyring(ctrl *gomock.Controller) *MockKeyring {
	mock := &MockKeyring{ctrl: ctrl}
	mock.recorder = &MockKeyringMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyring) EXPECT() *MockKeyringMockRecorder {
	return m.recorder
}

// Backend mocks base method.
func (m *MockKeyring) Backend() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Backend")
	ret0, _ := ret[0].(string)
	return ret0
}

// Backend indicates an expected call of Backend.
func (mr *MockKeyringMockRecorder) Backend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Backend", reflect.TypeOf((*MockKeyring)(nil).Backend))
}

// Delete mocks base method.
func (m *MockKeyring) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeyringMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyring)(nil).Delete), arg0)
}

// DeleteByAddress mocks base method.
func (m *MockKeyring) DeleteByAddress(arg0 types0.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByAddress", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByAddress indicates an expected call of DeleteByAddress.
func (mr *MockKeyringMockRecorder) DeleteByAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByAddress", reflect.TypeOf((*MockKeyring)(nil).DeleteByAddress), arg0)
}

// ExportPrivKeyArmor mocks base method.
func (m *MockKeyring) ExportPrivKeyArmor(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPrivKeyArmor", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPrivKeyArmor indicates an expected call of ExportPrivKeyArmor.
func (mr *MockKeyringMockRecorder) ExportPrivKeyArmor(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPrivKeyArmor", reflect.TypeOf((*MockKeyring)(nil).ExportPrivKeyArmor), arg0, arg1)
}

// ExportPrivKeyArmorByAddress mocks base method.
func (m *MockKeyring) ExportPrivKeyArmorByAddress(arg0 types0.Address, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPrivKeyArmorByAddress", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPrivKeyArmorByAddress indicates an expected call of ExportPrivKeyArmorByAddress.
func (mr *MockKeyringMockRecorder) ExportPrivKeyArmorByAddress(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPrivKeyArmorByAddress", reflect.TypeOf((*MockKeyring)(nil).ExportPrivKeyArmorByAddress), arg0, arg1)
}

// ExportPubKeyArmor mocks base method.
func (m *MockKeyring) ExportPubKeyArmor(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPubKeyArmor", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPubKeyArmor indicates an expected call of ExportPubKeyArmor.
func (mr *MockKeyringMockRecorder) ExportPubKeyArmor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPubKeyArmor", reflect.TypeOf((*MockKeyring)(nil).ExportPubKeyArmor), arg0)
}

// ExportPubKeyArmorByAddress mocks base method.
func (m *MockKeyring) ExportPubKeyArmorByAddress(arg0 types0.Address) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPubKeyArmorByAddress", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPubKeyArmorByAddress indicates an expected call of ExportPubKeyArmorByAddress.
func (mr *MockKeyringMockRecorder) ExportPubKeyArmorByAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPubKeyArmorByAddress", reflect.TypeOf((*MockKeyring)(nil).ExportPubKeyArmorByAddress), arg0)
}

// ImportPrivKey mocks base method.
func (m *MockKeyring) ImportPrivKey(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportPrivKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportPrivKey indicates an expected call of ImportPrivKey.
func (mr *MockKeyringMockRecorder) ImportPrivKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPrivKey", reflect.TypeOf((*MockKeyring)(nil).ImportPrivKey), arg0, arg1, arg2)
}

// ImportPrivKeyHex mocks base method.
func (m *MockKeyring) ImportPrivKeyHex(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportPrivKeyHex", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportPrivKeyHex indicates an expected call of ImportPrivKeyHex.
func (mr *MockKeyringMockRecorder) ImportPrivKeyHex(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPrivKeyHex", reflect.TypeOf((*MockKeyring)(nil).ImportPrivKeyHex), arg0, arg1, arg2)
}

// ImportPubKey mocks base method.
func (m *MockKeyring) ImportPubKey(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportPubKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportPubKey indicates an expected call of ImportPubKey.
func (mr *MockKeyringMockRecorder) ImportPubKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPubKey", reflect.TypeOf((*MockKeyring)(nil).ImportPubKey), arg0, arg1)
}

// Key mocks base method.
func (m *MockKeyring) Key(arg0 string) (*keyring.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Key", arg0)
	ret0, _ := ret[0].(*keyring.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Key indicates an expected call of Key.
func (mr *MockKeyringMockRecorder) Key(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Key", reflect.TypeOf((*MockKeyring)(nil).Key), arg0)
}

// KeyByAddress mocks base method.
func (m *MockKeyring) KeyByAddress(arg0 types0.Address) (*keyring.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KeyByAddress", arg0)
	ret0, _ := ret[0].(*keyring.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KeyByAddress indicates an expected call of KeyByAddress.
func (mr *MockKeyringMockRecorder) KeyByAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyByAddress", reflect.TypeOf((*MockKeyring)(nil).KeyByAddress), arg0)
}

// List mocks base method.
func (m *MockKeyring) List() ([]*keyring.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*keyring.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockKeyringMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockKeyring)(nil).List))
}

// MigrateAll mocks base method.
func (m *MockKeyring) MigrateAll() ([]*keyring.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateAll")
	ret0, _ := ret[0].([]*keyring.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateAll indicates an expected call of MigrateAll.
func (mr *MockKeyringMockRecorder) MigrateAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateAll", reflect.TypeOf((*MockKeyring)(nil).MigrateAll))
}

// NewAccount mocks base method.
func (m *MockKeyring) NewAccount(arg0, arg1, arg2, arg3 string, arg4 keyring.SignatureAlgo) (*keyring.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccount", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*keyring.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAccount indicates an expected call of NewAccount.
func (mr *MockKeyringMockRecorder) NewAccount(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccount", reflect.TypeOf((*MockKeyring)(nil).NewAccount), arg0, arg1, arg2, arg3, arg4)
}

// NewMnemonic mocks base method.
func (m *MockKeyring) NewMnemonic(arg0 string, arg1 keyring.Language, arg2, arg3 string, arg4 keyring.SignatureAlgo) (*keyring.Record, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMnemonic", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*keyring.Record)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewMnemonic indicates an expected call of NewMnemonic.
func (mr *MockKeyringMockRecorder) NewMnemonic(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMnemonic", reflect.TypeOf((*MockKeyring)(nil).NewMnemonic), arg0, arg1, arg2, arg3, arg4)
}

// Rename mocks base method.
func (m *MockKeyring) Rename(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockKeyringMockRecorder) Rename(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockKeyring)(nil).Rename), arg0, arg1)
}

// SaveLedgerKey mocks base method.
func (m *MockKeyring) SaveLedgerKey(arg0 string, arg1 keyring.SignatureAlgo, arg2 string, arg3, arg4, arg5 uint32) (*keyring.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLedgerKey", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*keyring.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveLedgerKey indicates an expected call of SaveLedgerKey.
func (mr *MockKeyringMockRecorder) SaveLedgerKey(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLedgerKey", reflect.TypeOf((*MockKeyring)(nil).SaveLedgerKey), arg0, arg1, arg2, arg3, arg4, arg5)
}

// SaveMultisig mocks base method.
func (m *MockKeyring) SaveMultisig(arg0 string, arg1 types.PubKey) (*keyring.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMultisig", arg0, arg1)
	ret0, _ := ret[0].(*keyring.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveMultisig indicates an expected call of SaveMultisig.
func (mr *MockKeyringMockRecorder) SaveMultisig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMultisig", reflect.TypeOf((*MockKeyring)(nil).SaveMultisig), arg0, arg1)
}

// SaveOfflineKey mocks base method.
func (m *MockKeyring) SaveOfflineKey(arg0 string, arg1 types.PubKey) (*keyring.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveOfflineKey", arg0, arg1)
	ret0, _ := ret[0].(*keyring.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveOfflineKey indicates an expected call of SaveOfflineKey.
func (mr *MockKeyringMockRecorder) SaveOfflineKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveOfflineKey", reflect.TypeOf((*MockKeyring)(nil).SaveOfflineKey), arg0, arg1)
}

// Sign mocks base method.
func (m *MockKeyring) Sign(arg0 string, arg1 []byte, arg2 signing.SignMode) ([]byte, types.PubKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(types.PubKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Sign indicates an expected call of Sign.
func (mr *MockKeyringMockRecorder) Sign(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockKeyring)(nil).Sign), arg0, arg1, arg2)
}

// SignByAddress mocks base method.
func (m *MockKeyring) SignByAddress(arg0 types0.Address, arg1 []byte, arg2 signing.SignMode) ([]byte, types.PubKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignByAddress", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(types.PubKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignByAddress indicates an expected call of SignByAddress.
func (mr *MockKeyringMockRecorder) SignByAddress(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignByAddress", reflect.TypeOf((*MockKeyring)(nil).SignByAddress), arg0, arg1, arg2)
}

// SupportedAlgorithms mocks base method.
func (m *MockKeyring) SupportedAlgorithms() (keyring.SigningAlgoList, keyring.SigningAlgoList) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedAlgorithms")
	ret0, _ := ret[0].(keyring.SigningAlgoList)
	ret1, _ := ret[1].(keyring.SigningAlgoList)
	return ret0, ret1
}

// SupportedAlgorithms indicates an expected call of SupportedAlgorithms.
func (mr *MockKeyringMockRecorder) SupportedAlgorithms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedAlgorithms", reflect.TypeOf((*MockKeyring)(nil).SupportedAlgorithms))
}
