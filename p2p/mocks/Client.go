// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// BatchRetrieve provides a mock function with given fields: ctx, keys, reqCount, txID, localOnly
func (_m *Client) BatchRetrieve(ctx context.Context, keys []string, reqCount int, txID string, localOnly ...bool) (map[string][]byte, error) {
	_va := make([]interface{}, len(localOnly))
	for _i := range localOnly {
		_va[_i] = localOnly[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, keys, reqCount, txID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[string][]byte
	if rf, ok := ret.Get(0).(func(context.Context, []string, int, string, ...bool) map[string][]byte); ok {
		r0 = rf(ctx, keys, reqCount, txID, localOnly...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, int, string, ...bool) error); ok {
		r1 = rf(ctx, keys, reqCount, txID, localOnly...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, key
func (_m *Client) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableKey provides a mock function with given fields: ctx, b58EncodedHash
func (_m *Client) DisableKey(ctx context.Context, b58EncodedHash string) error {
	ret := _m.Called(ctx, b58EncodedHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, b58EncodedHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EnableKey provides a mock function with given fields: ctx, b58EncodedHash
func (_m *Client) EnableKey(ctx context.Context, b58EncodedHash string) error {
	ret := _m.Called(ctx, b58EncodedHash)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, b58EncodedHash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLocalKeys provides a mock function with given fields: ctx, from, to
func (_m *Client) GetLocalKeys(ctx context.Context, from *time.Time, to time.Time) ([]string, error) {
	ret := _m.Called(ctx, from, to)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, *time.Time, time.Time) []string); ok {
		r0 = rf(ctx, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *time.Time, time.Time) error); ok {
		r1 = rf(ctx, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LocalStore provides a mock function with given fields: ctx, key, data
func (_m *Client) LocalStore(ctx context.Context, key string, data []byte) (string, error) {
	ret := _m.Called(ctx, key, data)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) string); ok {
		r0 = rf(ctx, key, data)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, []byte) error); ok {
		r1 = rf(ctx, key, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NClosestNodes provides a mock function with given fields: ctx, n, key, ignores
func (_m *Client) NClosestNodes(ctx context.Context, n int, key string, ignores ...string) []string {
	_va := make([]interface{}, len(ignores))
	for _i := range ignores {
		_va[_i] = ignores[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, n, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, int, string, ...string) []string); ok {
		r0 = rf(ctx, n, key, ignores...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// NClosestNodesWithIncludingNodeList provides a mock function with given fields: ctx, n, key, ignores, nodesToInclude
func (_m *Client) NClosestNodesWithIncludingNodeList(ctx context.Context, n int, key string, ignores []string, nodesToInclude []string) []string {
	ret := _m.Called(ctx, n, key, ignores, nodesToInclude)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, int, string, []string, []string) []string); ok {
		r0 = rf(ctx, n, key, ignores, nodesToInclude)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Retrieve provides a mock function with given fields: ctx, key, localOnly
func (_m *Client) Retrieve(ctx context.Context, key string, localOnly ...bool) ([]byte, error) {
	_va := make([]interface{}, len(localOnly))
	for _i := range localOnly {
		_va[_i] = localOnly[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, ...bool) []byte); ok {
		r0 = rf(ctx, key, localOnly...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...bool) error); ok {
		r1 = rf(ctx, key, localOnly...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stats provides a mock function with given fields: ctx
func (_m *Client) Stats(ctx context.Context) (map[string]interface{}, error) {
	ret := _m.Called(ctx)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context) map[string]interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, data, typ
func (_m *Client) Store(ctx context.Context, data []byte, typ int) (string, error) {
	ret := _m.Called(ctx, data, typ)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, []byte, int) string); ok {
		r0 = rf(ctx, data, typ)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte, int) error); ok {
		r1 = rf(ctx, data, typ)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreBatch provides a mock function with given fields: ctx, values, typ, taskID
func (_m *Client) StoreBatch(ctx context.Context, values [][]byte, typ int, taskID string) error {
	ret := _m.Called(ctx, values, typ, taskID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, [][]byte, int, string) error); ok {
		r0 = rf(ctx, values, typ, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
