// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -destination=client_mock.go -package=github -source=client.go
//

// Package github is a generated GoMock package.
package github

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGithubClient is a mock of GithubClient interface.
type MockGithubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGithubClientMockRecorder
	isgomock struct{}
}

// MockGithubClientMockRecorder is the mock recorder for MockGithubClient.
type MockGithubClientMockRecorder struct {
	mock *MockGithubClient
}

// NewMockGithubClient creates a new mock instance.
func NewMockGithubClient(ctrl *gomock.Controller) *MockGithubClient {
	mock := &MockGithubClient{ctrl: ctrl}
	mock.recorder = &MockGithubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubClient) EXPECT() *MockGithubClientMockRecorder {
	return m.recorder
}

// DownloadBinary mocks base method.
func (m *MockGithubClient) DownloadBinary(url, destPath string, progress func(int64, int64)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadBinary", url, destPath, progress)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadBinary indicates an expected call of DownloadBinary.
func (mr *MockGithubClientMockRecorder) DownloadBinary(url, destPath, progress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadBinary", reflect.TypeOf((*MockGithubClient)(nil).DownloadBinary), url, destPath, progress)
}

// GetLatestRelease mocks base method.
func (m *MockGithubClient) GetLatestRelease() (*Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestRelease")
	ret0, _ := ret[0].(*Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestRelease indicates an expected call of GetLatestRelease.
func (mr *MockGithubClientMockRecorder) GetLatestRelease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestRelease", reflect.TypeOf((*MockGithubClient)(nil).GetLatestRelease))
}

// GetLatestStableRelease mocks base method.
func (m *MockGithubClient) GetLatestStableRelease() (*Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestStableRelease")
	ret0, _ := ret[0].(*Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestStableRelease indicates an expected call of GetLatestStableRelease.
func (mr *MockGithubClientMockRecorder) GetLatestStableRelease() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestStableRelease", reflect.TypeOf((*MockGithubClient)(nil).GetLatestStableRelease))
}

// GetRelease mocks base method.
func (m *MockGithubClient) GetRelease(tag string) (*Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelease", tag)
	ret0, _ := ret[0].(*Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelease indicates an expected call of GetRelease.
func (mr *MockGithubClientMockRecorder) GetRelease(tag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelease", reflect.TypeOf((*MockGithubClient)(nil).GetRelease), tag)
}

// GetSupernodeDownloadURL mocks base method.
func (m *MockGithubClient) GetSupernodeDownloadURL(version string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupernodeDownloadURL", version)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSupernodeDownloadURL indicates an expected call of GetSupernodeDownloadURL.
func (mr *MockGithubClientMockRecorder) GetSupernodeDownloadURL(version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupernodeDownloadURL", reflect.TypeOf((*MockGithubClient)(nil).GetSupernodeDownloadURL), version)
}

// ListReleases mocks base method.
func (m *MockGithubClient) ListReleases() ([]*Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleases")
	ret0, _ := ret[0].([]*Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReleases indicates an expected call of ListReleases.
func (mr *MockGithubClientMockRecorder) ListReleases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleases", reflect.TypeOf((*MockGithubClient)(nil).ListReleases))
}
